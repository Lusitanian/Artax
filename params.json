{"name":"Artax","body":"### What Is Artax?\r\nArtax is a scaffolding layer for event-driven PHP 5.4+ applications.\r\n\r\n### Project Goals\r\n\r\n* Supply an event-driven framework without inhibiting linear application design;\r\n* Integrate simple, built-in dependency injection;\r\n* Lazy-load anything that can be put off without performance penalties;\r\n* Eschew `static` *completely* in favor of maximum testability, readability and API transparency;\r\n* Favor OOP principles for complex applications while still supporting functional and lambda-based code;\r\n* Build all components using SOLID, readable, documented and 100% unit-tested code.\r\n\r\n### Evented Applications\r\n\r\nArtax attempts to provide a baseline for event-driven PHP applications. A Mediator Pattern implementation queues chained event listeners, allowing them to respond appropriately as new events occur.\r\n\r\n### Dependency Injection & Lazy-Listeners\r\n\r\nArtax uses an integrated Dependency Injection Container (DIC) in conjunction with the Mediator to lazy-load class-based event listeners. The container uses a string-based system for instantiating and injecting dependencies as needed.\r\n\r\n### Unified Error and Shutdown Handling\r\n\r\nArtax abstracts away the details of PHP error handling, turning PHP errors, uncaught exceptions and fatal shutdowns into events to which listeners can attach for gracefully handling abnormal program terminations.","tagline":"A PHP5.4 engine for event-driven application design","google":"UA-31084746-1","note":"Don't delete this file! It's used internally to help with page regeneration."}